/**
  * Copyright 2014 Google Inc. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * 
  *     http://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
*/

#ifndef __MR4C_EXTERNAL_ENTRY_H__
#define __MR4C_EXTERNAL_ENTRY_H__

#include "ExternalAlgorithmData.h"
#include "ExternalContext.h"
#include "ExternalDataset.h"

namespace MR4C {

class ExternalEntry {

	public :
		ExternalEntry();

		void dumpDataset(ExternalDataset* dataset);

		ExternalDataset* cloneDataset(ExternalDataset* dataset);

		ExternalAlgorithmData* cloneAlgorithmData(ExternalAlgorithmData* data);

		ExternalAlgorithm* getAlgorithm(const char* algoName);

		bool executeAlgorithm(const char* algoName, ExternalAlgorithmData* extData, ExternalContext* context);

		void pushEnvironmentProperties(const char* setName, const char* serializedProps);

		/**
		  * Does logging so caller can test callback works
		*/
		void testLogging(ExternalContext* extContext, const char* level, const char* msg);

		/**
		  * Does progress reporting so caller can test callback works
		*/
		void testProgressReporting(ExternalContext* extContext, float percentDone, const char* msg);

		/**
		  * Does failure reporting so caller can test callback works
		*/
		void testFailureReporting(ExternalContext* extContext, const char* msg);

		/**
		  * Does send message so caller can test callback works
		*/
		void testSendMessage(ExternalContext* extContext, const Message& msg);

		/**
		  * Does add file so caller can test callback works
		*/
		void testAddDataFile(ExternalDataset* extDataset, ExternalDataFile* extFile, bool stream);

		/**
		  * Does file name fetching so caller can test callback works
		*/
		const char* testGetDataFileName(ExternalDataset* extDataset, const char* serializedKey);

		/**
		  * Does file finding so caller can test callback works
		*/
		ExternalDataFile* testFindDataFile(ExternalDataset* extDataset, const char* serializedKey);

		/**
		  * Does check for query only so caller can test callback works
		*/
		bool testIsQueryOnly(ExternalDataset* extDataset);

		/**
		  * Does random access read so caller can test callback works.
		  * @return the file that was read.
		*/
		ExternalDataFile* testReadFileAsRandomAccess(ExternalDataset* extDataset, const char* serializedKey);

		/**
		  * Does random access write so caller can test callback works
		*/
		void testWriteFileAsRandomAccess(ExternalDataset* extDataset, ExternalDataFile* extFile);

		/**
		 * Cleans up local temp files that might have been created by algorithm code.
		 */
		void deleteLocalTempFiles();

		/**
		  * Returns a NULL terminated array of C-strings containing paths for all log files generated by log4cxx
		*/
		const char** getLogFilePaths();

		~ExternalEntry();

	private :

		// prevent calling these
		ExternalEntry(const ExternalEntry& entry);
		ExternalEntry& operator=(const ExternalEntry& entry);

};

}
#endif

